/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.81
 * Generated at: 2022-07-21 10:47:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class treeView_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("  <!DOCTYPE html>\n");
      out.write("  <html lang=\"kr\">\n");
      out.write("  <head>\n");
      out.write("  <meta charset=\"UTF-8\">\n");
      out.write("  </head>\n");
      out.write("  <body>\n");
      out.write("  <script src=\"https://unpkg.com/gojs@2.2.13/release/go.js\"></script>\n");
      out.write("  <p>\n");
      out.write("    This is a minimalist HTML and JavaScript skeleton of the GoJS Sample\n");
      out.write("    <a href=\"https://gojs.net/latest/samples/treeView.html\">treeView.html</a>. It was automatically generated from a button on the sample page,\n");
      out.write("    and does not contain the full HTML. It is intended as a starting point to adapt for your own usage.\n");
      out.write("    For many samples, you may need to inspect the\n");
      out.write("    <a href=\"https://github.com/NorthwoodsSoftware/GoJS/blob/master/samples/treeView.html\">full source on Github</a>\n");
      out.write("    and copy other files or scripts.\n");
      out.write("  </p>\n");
      out.write("  <div id=\"allSampleContent\" class=\"p-4 w-full\">\n");
      out.write("    <script id=\"code\">\n");
      out.write("    // use a V figure instead of MinusLine in the TreeExpanderButton\n");
      out.write("    go.Shape.defineFigureGenerator(\"ExpandedLine\", (shape, w, h) => {\n");
      out.write("      return new go.Geometry()\n");
      out.write("            .add(new go.PathFigure(0, 0.25*h, false)\n");
      out.write("                  .add(new go.PathSegment(go.PathSegment.Line, .5 * w, 0.75*h))\n");
      out.write("                  .add(new go.PathSegment(go.PathSegment.Line, w, 0.25*h)));\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    // use a sideways V figure instead of PlusLine in the TreeExpanderButton\n");
      out.write("    go.Shape.defineFigureGenerator(\"CollapsedLine\", (shape, w, h) => {\n");
      out.write("      return new go.Geometry()\n");
      out.write("            .add(new go.PathFigure(0.25*w, 0, false)\n");
      out.write("                  .add(new go.PathSegment(go.PathSegment.Line, 0.75*w, .5 * h))\n");
      out.write("                  .add(new go.PathSegment(go.PathSegment.Line, 0.25*w, h)));\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    function init() {\n");
      out.write("\n");
      out.write("      // Since 2.2 you can also author concise templates with method chaining instead of GraphObject.make\n");
      out.write("      // For details, see https://gojs.net/latest/intro/buildingObjects.html\n");
      out.write("      const $ = go.GraphObject.make;  // for conciseness in defining templates\n");
      out.write("\n");
      out.write("      myDiagram =\n");
      out.write("        $(go.Diagram, \"myDiagramDiv\",\n");
      out.write("          {\n");
      out.write("            allowMove: false,\n");
      out.write("            allowCopy: false,\n");
      out.write("            allowDelete: false,\n");
      out.write("            allowHorizontalScroll: false,\n");
      out.write("            layout:\n");
      out.write("              $(go.TreeLayout,\n");
      out.write("                {\n");
      out.write("                  alignment: go.TreeLayout.AlignmentStart,\n");
      out.write("                  angle: 0,\n");
      out.write("                  compaction: go.TreeLayout.CompactionNone,\n");
      out.write("                  layerSpacing: 16,\n");
      out.write("                  layerSpacingParentOverlap: 1,\n");
      out.write("                  nodeIndentPastParent: 1.0,\n");
      out.write("                  nodeSpacing: 0,\n");
      out.write("                  setsPortSpot: false,\n");
      out.write("                  setsChildPortSpot: false\n");
      out.write("                })\n");
      out.write("          });\n");
      out.write("\n");
      out.write("      myDiagram.nodeTemplate =\n");
      out.write("        $(go.Node,\n");
      out.write("          { // no Adornment: instead change panel background color by binding to Node.isSelected\n");
      out.write("            selectionAdorned: false,\n");
      out.write("            // a custom function to allow expanding/collapsing on double-click\n");
      out.write("            // this uses similar logic to a TreeExpanderButton\n");
      out.write("            doubleClick: (e, node) => {\n");
      out.write("              var cmd = myDiagram.commandHandler;\n");
      out.write("              if (node.isTreeExpanded) {\n");
      out.write("                if (!cmd.canCollapseTree(node)) return;\n");
      out.write("              } else {\n");
      out.write("                if (!cmd.canExpandTree(node)) return;\n");
      out.write("              }\n");
      out.write("              e.handled = true;\n");
      out.write("              if (node.isTreeExpanded) {\n");
      out.write("                cmd.collapseTree(node);\n");
      out.write("              } else {\n");
      out.write("                cmd.expandTree(node);\n");
      out.write("              }\n");
      out.write("            }\n");
      out.write("          },\n");
      out.write("          $(\"TreeExpanderButton\",\n");
      out.write("            { // customize the button's appearance\n");
      out.write("              \"_treeExpandedFigure\": \"ExpandedLine\",\n");
      out.write("              \"_treeCollapsedFigure\": \"CollapsedLine\",\n");
      out.write("              \"ButtonBorder.fill\": \"whitesmoke\",\n");
      out.write("              \"ButtonBorder.stroke\": null,\n");
      out.write("              \"_buttonFillOver\": \"rgba(0,128,255,0.25)\",\n");
      out.write("              \"_buttonStrokeOver\": null\n");
      out.write("            }),\n");
      out.write("          $(go.Panel, \"Horizontal\",\n");
      out.write("            { position: new go.Point(18, 0) },\n");
      out.write("            new go.Binding(\"background\", \"isSelected\", s => s ? \"lightblue\" : \"white\").ofObject(),\n");
      out.write("            $(go.Picture,\n");
      out.write("              {\n");
      out.write("                width: 25, height: 25,\n");
      out.write("                margin: new go.Margin(0, 4, 0, 0),\n");
      out.write("                imageStretch: go.GraphObject.Uniform\n");
      out.write("              },\n");
      out.write("              // bind the picture source on two properties of the Node\n");
      out.write("              // to display open folder, closed folder, or document\n");
      out.write("              new go.Binding(\"source\", \"isTreeExpanded\", imageConverter).ofObject(),\n");
      out.write("              new go.Binding(\"source\", \"isTreeLeaf\", imageConverter).ofObject()),\n");
      out.write("            $(go.TextBlock,\n");
      out.write("              { font: '9pt Verdana, sans-serif' },\n");
      out.write("              new go.Binding(\"text\", \"key\", s => \"DDIT \" + s))\n");
      out.write("          )  // end Horizontal Panel\n");
      out.write("        );  // end Node\n");
      out.write("\n");
      out.write("      // without lines\n");
      out.write("      myDiagram.linkTemplate = $(go.Link);\n");
      out.write("\n");
      out.write("      // // with lines\n");
      out.write("      myDiagram.linkTemplate =\n");
      out.write("        $(go.Link,\n");
      out.write("          { selectable: false,\n");
      out.write("            routing: go.Link.Orthogonal,\n");
      out.write("            fromEndSegmentLength: 4,\n");
      out.write("            toEndSegmentLength: 4,\n");
      out.write("            fromSpot: new go.Spot(0.001, 1, 7, 0),\n");
      out.write("            toSpot: go.Spot.Left },\n");
      out.write("          $(go.Shape,\n");
      out.write("            { stroke: 'gray', strokeDashArray: [1,2] }));\n");
      out.write("\n");
      out.write("      // create a random tree\n");
      out.write("      var nodeDataArray = [{ key: 0 }];\n");
      out.write("      var max = 49;\n");
      out.write("      var count = 0;\n");
      out.write("      while (count < max) {\n");
      out.write("        count = makeTree(3, count, max, nodeDataArray, nodeDataArray[0]);\n");
      out.write("      }\n");
      out.write("      \n");
      out.write("      console.log(nodeDataArray);\n");
      out.write("      tmp = [];\n");
      out.write("      tmp.push({\"key\" : 0, \"__gohashid\" : 0});\n");
      out.write("      tmp.push({\"key\" : 1, \"__gohashid\" : 1});\n");
      out.write("      tmp.push({\"key\" : 2, \"__gohashid\" : 2, \"parent\" : 0});\n");
      out.write("      /*\n");
      out.write("      Array<DataVO> dataList = service.getDataList();\n");
      out.write("      D_ID : 1\n");
      out.write("      \n");
      out.write("      */\n");
      out.write("//       myDiagram.model = new go.TreeModel(nodeDataArray);\n");
      out.write("      myDiagram.model = new go.TreeModel(tmp);\n");
      out.write("    } // init() end\n");
      out.write("\n");
      out.write("    function makeTree(level, count, max, nodeDataArray, parentdata) {\n");
      out.write("      var numchildren = Math.floor(Math.random() * 10);\n");
      out.write("      for (var i = 0; i < numchildren; i++) {\n");
      out.write("        if (count >= max) return count;\n");
      out.write("        count++;\n");
      out.write("        var childdata = { key: count, parent: parentdata.key };\n");
      out.write("        nodeDataArray.push(childdata);\n");
      out.write("        if (level > 0 && Math.random() > 0.5) {\n");
      out.write("          count = makeTree(level - 1, count, max, nodeDataArray, childdata);\n");
      out.write("        }\n");
      out.write("      }\n");
      out.write("      return count;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // takes a property change on either isTreeLeaf or isTreeExpanded and selects the correct image to use\n");
      out.write("    function imageConverter(prop, picture) {\n");
      out.write("      var node = picture.part;\n");
      out.write("      if (node.isTreeLeaf) {\n");
      out.write("        return \"images/document.svg\";\n");
      out.write("      } else {\n");
      out.write("        if (node.isTreeExpanded) {\n");
      out.write("          return \"images/openFolder.svg\";\n");
      out.write("        } else {\n");
      out.write("          return \"images/closedFolder.svg\";\n");
      out.write("        }\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("    window.addEventListener('DOMContentLoaded', init);\n");
      out.write("  </script>\n");
      out.write("\n");
      out.write("<div id=\"sample\">\n");
      out.write("  <div id=\"myDiagramDiv\" style=\"border: 1px solid black; width: 300px; height: 500px; position: relative; -webkit-tap-highlight-color: rgba(255, 255, 255, 0); cursor: auto;\"><canvas tabindex=\"0\" width=\"281\" height=\"498\" style=\"position: absolute; top: 0px; left: 0px; z-index: 2; user-select: none; touch-action: none; width: 281px; height: 498px; cursor: auto;\">This text is displayed if your browser does not support the Canvas HTML element.</canvas><div style=\"position: absolute; overflow: auto; width: 298px; height: 498px; z-index: 1;\"><div style=\"position: absolute; width: 1px; height: 9010px;\"></div></div></div>\n");
      out.write("  <p>\n");
      out.write("    This shows how to create a traditional \"TreeView\" in a <b>GoJS</b> diagram.\n");
      out.write("    There are 500 nodes in the tree.\n");
      out.write("  </p>\n");
      out.write("  <p>\n");
      out.write("    Look at this page's source code to see how the properties on the <a href=\"../api/symbols/TreeLayout.html\" target=\"api\">TreeLayout</a> are set.\n");
      out.write("  </p>\n");
      out.write("  <p>\n");
      out.write("    The node template makes use of a \"TreeExpanderButton\" panel to implement the expand/collapse button.\n");
      out.write("    It also implements a custom doubleClick function to allow nodes to be expanded/collapsed on double-click.\n");
      out.write("    Lastly, the source of the picture on each node is bound to two different properties, <a href=\"../api/symbols/Node.html#isTreeLeaf\" target=\"api\">Node.isTreeLeaf</a> and\n");
      out.write("    <a href=\"../api/symbols/Node.html#isTreeExpanded\" target=\"api\">Node.isTreeExpanded</a>; the <b>imageConverter</b> function is used to select the correct image\n");
      out.write("    based on these properties.\n");
      out.write("  </p>\n");
      out.write("  <p>There are two link templates in the source code, one which uses no lines, and one which connects the items with dotted lines.</p>\n");
      out.write("  <p>\n");
      out.write("    See the <a href=\"../intro/buttons.html\" target=\"_blank\">Intro page on Buttons</a> for more GoJS button information.\n");
      out.write("    The <a href=\"triStateCheckBoxTree.html\" target=\"_blank\">Tri-state CheckBox Tree</a> sample demonstrates a \"tree view\" where each item\n");
      out.write("    has a three-state checkbox.\n");
      out.write("    The <a href=\"treeMapper.html\" target=\"_blank\">Tree Mapper</a> sample demonstrates how to map (draw associations) between items in two trees.\n");
      out.write("    The <a href=\"updateDemo.html\" target=\"_blank\">Update Demo</a> sample also uses a \"tree view\" for its own purposes.\n");
      out.write("  </p>\n");
      out.write("  <p>The icons in this sample are from <a href=\"https://icons8.com/\" target=\"blank\">icons8.com</a></p>\n");
      out.write("<p class=\"text-xs\">GoJS version 2.2.13. Copyright 1998-2022 by Northwoods Software.</p></div>\n");
      out.write("    <p><a href=\"https://github.com/NorthwoodsSoftware/GoJS/blob/master/samples/treeView.html\" target=\"_blank\">View this sample page's source on GitHub</a></p><pre class=\" language-js\">\n");
      out.write("    <span class=\"token comment\">// use a V figure instead of MinusLine in the TreeExpanderButton</span>\n");
      out.write("    go<span class=\"token punctuation\">.</span>Shape<span class=\"token punctuation\">.</span><span class=\"token function\">defineFigureGenerator</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ExpandedLine\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">shape<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n");
      out.write("      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">go<span class=\"token punctuation\">.</span>Geometry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n");
      out.write("            <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">go<span class=\"token punctuation\">.</span>PathFigure</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.25</span><span class=\"token operator\">*</span>h<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n");
      out.write("                  <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">go<span class=\"token punctuation\">.</span>PathSegment</span><span class=\"token punctuation\">(</span>go<span class=\"token punctuation\">.</span>PathSegment<span class=\"token punctuation\">.</span>Line<span class=\"token punctuation\">,</span> <span class=\"token number\">.5</span> <span class=\"token operator\">*</span> w<span class=\"token punctuation\">,</span> <span class=\"token number\">0.75</span><span class=\"token operator\">*</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n");
      out.write("                  <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">go<span class=\"token punctuation\">.</span>PathSegment</span><span class=\"token punctuation\">(</span>go<span class=\"token punctuation\">.</span>PathSegment<span class=\"token punctuation\">.</span>Line<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> <span class=\"token number\">0.25</span><span class=\"token operator\">*</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n");
      out.write("    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n");
      out.write("\n");
      out.write("    <span class=\"token comment\">// use a sideways V figure instead of PlusLine in the TreeExpanderButton</span>\n");
      out.write("    go<span class=\"token punctuation\">.</span>Shape<span class=\"token punctuation\">.</span><span class=\"token function\">defineFigureGenerator</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CollapsedLine\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">shape<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n");
      out.write("      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">go<span class=\"token punctuation\">.</span>Geometry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n");
      out.write("            <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">go<span class=\"token punctuation\">.</span>PathFigure</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.25</span><span class=\"token operator\">*</span>w<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n");
      out.write("                  <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">go<span class=\"token punctuation\">.</span>PathSegment</span><span class=\"token punctuation\">(</span>go<span class=\"token punctuation\">.</span>PathSegment<span class=\"token punctuation\">.</span>Line<span class=\"token punctuation\">,</span> <span class=\"token number\">0.75</span><span class=\"token operator\">*</span>w<span class=\"token punctuation\">,</span> <span class=\"token number\">.5</span> <span class=\"token operator\">*</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n");
      out.write("                  <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">go<span class=\"token punctuation\">.</span>PathSegment</span><span class=\"token punctuation\">(</span>go<span class=\"token punctuation\">.</span>PathSegment<span class=\"token punctuation\">.</span>Line<span class=\"token punctuation\">,</span> <span class=\"token number\">0.25</span><span class=\"token operator\">*</span>w<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n");
      out.write("    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n");
      out.write("\n");
      out.write("    <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n");
      out.write("\n");
      out.write("      <span class=\"token comment\">// Since 2.2 you can also author concise templates with method chaining instead of GraphObject.make</span>\n");
      out.write("      <span class=\"token comment\">// For details, see https://gojs.net/latest/intro/buildingObjects.html</span>\n");
      out.write("      <span class=\"token keyword\">const</span> $ <span class=\"token operator\">=</span> go<span class=\"token punctuation\">.</span>GraphObject<span class=\"token punctuation\">.</span>make<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// for conciseness in defining templates</span>\n");
      out.write("\n");
      out.write("      myDiagram <span class=\"token operator\">=</span>\n");
      out.write("        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>go<span class=\"token punctuation\">.</span>Diagram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"myDiagramDiv\"</span><span class=\"token punctuation\">,</span>\n");
      out.write("          <span class=\"token punctuation\">{</span>\n");
      out.write("            allowMove<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n");
      out.write("            allowCopy<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n");
      out.write("            allowDelete<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n");
      out.write("            allowHorizontalScroll<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n");
      out.write("            layout<span class=\"token operator\">:</span>\n");
      out.write("              <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>go<span class=\"token punctuation\">.</span>TreeLayout<span class=\"token punctuation\">,</span>\n");
      out.write("                <span class=\"token punctuation\">{</span>\n");
      out.write("                  alignment<span class=\"token operator\">:</span> go<span class=\"token punctuation\">.</span>TreeLayout<span class=\"token punctuation\">.</span>AlignmentStart<span class=\"token punctuation\">,</span>\n");
      out.write("                  angle<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n");
      out.write("                  compaction<span class=\"token operator\">:</span> go<span class=\"token punctuation\">.</span>TreeLayout<span class=\"token punctuation\">.</span>CompactionNone<span class=\"token punctuation\">,</span>\n");
      out.write("                  layerSpacing<span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span>\n");
      out.write("                  layerSpacingParentOverlap<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n");
      out.write("                  nodeIndentPastParent<span class=\"token operator\">:</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n");
      out.write("                  nodeSpacing<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n");
      out.write("                  setsPortSpot<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n");
      out.write("                  setsChildPortSpot<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n");
      out.write("                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n");
      out.write("          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n");
      out.write("\n");
      out.write("      myDiagram<span class=\"token punctuation\">.</span>nodeTemplate <span class=\"token operator\">=</span>\n");
      out.write("        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>go<span class=\"token punctuation\">.</span>Node<span class=\"token punctuation\">,</span>\n");
      out.write("          <span class=\"token punctuation\">{</span> <span class=\"token comment\">// no Adornment: instead change panel background color by binding to Node.isSelected</span>\n");
      out.write("            selectionAdorned<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n");
      out.write("            <span class=\"token comment\">// a custom function to allow expanding/collapsing on double-click</span>\n");
      out.write("            <span class=\"token comment\">// this uses similar logic to a TreeExpanderButton</span>\n");
      out.write("            <span class=\"token function-variable function\">doubleClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span> node</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n");
      out.write("              <span class=\"token keyword\">var</span> cmd <span class=\"token operator\">=</span> myDiagram<span class=\"token punctuation\">.</span>commandHandler<span class=\"token punctuation\">;</span>\n");
      out.write("              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>isTreeExpanded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n");
      out.write("                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cmd<span class=\"token punctuation\">.</span><span class=\"token function\">canCollapseTree</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n");
      out.write("              <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n");
      out.write("                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cmd<span class=\"token punctuation\">.</span><span class=\"token function\">canExpandTree</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n");
      out.write("              <span class=\"token punctuation\">}</span>\n");
      out.write("              e<span class=\"token punctuation\">.</span>handled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n");
      out.write("              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>isTreeExpanded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n");
      out.write("                cmd<span class=\"token punctuation\">.</span><span class=\"token function\">collapseTree</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n");
      out.write("              <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n");
      out.write("                cmd<span class=\"token punctuation\">.</span><span class=\"token function\">expandTree</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n");
      out.write("              <span class=\"token punctuation\">}</span>\n");
      out.write("            <span class=\"token punctuation\">}</span>\n");
      out.write("          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n");
      out.write("          <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TreeExpanderButton\"</span><span class=\"token punctuation\">,</span>\n");
      out.write("            <span class=\"token punctuation\">{</span> <span class=\"token comment\">// customize the button's appearance</span>\n");
      out.write("              <span class=\"token string\">\"_treeExpandedFigure\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ExpandedLine\"</span><span class=\"token punctuation\">,</span>\n");
      out.write("              <span class=\"token string\">\"_treeCollapsedFigure\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CollapsedLine\"</span><span class=\"token punctuation\">,</span>\n");
      out.write("              <span class=\"token string\">\"ButtonBorder.fill\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"whitesmoke\"</span><span class=\"token punctuation\">,</span>\n");
      out.write("              <span class=\"token string\">\"ButtonBorder.stroke\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n");
      out.write("              <span class=\"token string\">\"_buttonFillOver\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgba(0,128,255,0.25)\"</span><span class=\"token punctuation\">,</span>\n");
      out.write("              <span class=\"token string\">\"_buttonStrokeOver\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n");
      out.write("            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n");
      out.write("          <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>go<span class=\"token punctuation\">.</span>Panel<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Horizontal\"</span><span class=\"token punctuation\">,</span>\n");
      out.write("            <span class=\"token punctuation\">{</span> position<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">go<span class=\"token punctuation\">.</span>Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n");
      out.write("            <span class=\"token keyword\">new</span> <span class=\"token class-name\">go<span class=\"token punctuation\">.</span>Binding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"background\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"isSelected\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">s</span> <span class=\"token operator\">=&gt;</span> s <span class=\"token operator\">?</span> <span class=\"token string\">\"lightblue\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n");
      out.write("            <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>go<span class=\"token punctuation\">.</span>Picture<span class=\"token punctuation\">,</span>\n");
      out.write("              <span class=\"token punctuation\">{</span>\n");
      out.write("                width<span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n");
      out.write("                margin<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">go<span class=\"token punctuation\">.</span>Margin</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n");
      out.write("                imageStretch<span class=\"token operator\">:</span> go<span class=\"token punctuation\">.</span>GraphObject<span class=\"token punctuation\">.</span>Uniform\n");
      out.write("              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n");
      out.write("              <span class=\"token comment\">// bind the picture source on two properties of the Node</span>\n");
      out.write("              <span class=\"token comment\">// to display open folder, closed folder, or document</span>\n");
      out.write("              <span class=\"token keyword\">new</span> <span class=\"token class-name\">go<span class=\"token punctuation\">.</span>Binding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"source\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"isTreeExpanded\"</span><span class=\"token punctuation\">,</span> imageConverter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n");
      out.write("              <span class=\"token keyword\">new</span> <span class=\"token class-name\">go<span class=\"token punctuation\">.</span>Binding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"source\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"isTreeLeaf\"</span><span class=\"token punctuation\">,</span> imageConverter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n");
      out.write("            <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>go<span class=\"token punctuation\">.</span>TextBlock<span class=\"token punctuation\">,</span>\n");
      out.write("              <span class=\"token punctuation\">{</span> font<span class=\"token operator\">:</span> <span class=\"token string\">'9pt Verdana, sans-serif'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n");
      out.write("              <span class=\"token keyword\">new</span> <span class=\"token class-name\">go<span class=\"token punctuation\">.</span>Binding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">s</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"item \"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n");
      out.write("          <span class=\"token punctuation\">)</span>  <span class=\"token comment\">// end Horizontal Panel</span>\n");
      out.write("        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// end Node</span>\n");
      out.write("\n");
      out.write("      <span class=\"token comment\">// without lines</span>\n");
      out.write("      myDiagram<span class=\"token punctuation\">.</span>linkTemplate <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>go<span class=\"token punctuation\">.</span>Link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n");
      out.write("\n");
      out.write("      <span class=\"token comment\">// // with lines</span>\n");
      out.write("      <span class=\"token comment\">// myDiagram.linkTemplate =</span>\n");
      out.write("      <span class=\"token comment\">//   $(go.Link,</span>\n");
      out.write("      <span class=\"token comment\">//     { selectable: false,</span>\n");
      out.write("      <span class=\"token comment\">//       routing: go.Link.Orthogonal,</span>\n");
      out.write("      <span class=\"token comment\">//       fromEndSegmentLength: 4,</span>\n");
      out.write("      <span class=\"token comment\">//       toEndSegmentLength: 4,</span>\n");
      out.write("      <span class=\"token comment\">//       fromSpot: new go.Spot(0.001, 1, 7, 0),</span>\n");
      out.write("      <span class=\"token comment\">//       toSpot: go.Spot.Left },</span>\n");
      out.write("      <span class=\"token comment\">//     $(go.Shape,</span>\n");
      out.write("      <span class=\"token comment\">//       { stroke: 'gray', strokeDashArray: [1,2] }));</span>\n");
      out.write("\n");
      out.write("      <span class=\"token comment\">// create a random tree</span>\n");
      out.write("      <span class=\"token keyword\">var</span> nodeDataArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n");
      out.write("      <span class=\"token keyword\">var</span> max <span class=\"token operator\">=</span> <span class=\"token number\">499</span><span class=\"token punctuation\">;</span>\n");
      out.write("      <span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n");
      out.write("      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n");
      out.write("        count <span class=\"token operator\">=</span> <span class=\"token function\">makeTree</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">,</span> nodeDataArray<span class=\"token punctuation\">,</span> nodeDataArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n");
      out.write("      <span class=\"token punctuation\">}</span>\n");
      out.write("      myDiagram<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">go<span class=\"token punctuation\">.</span>TreeModel</span><span class=\"token punctuation\">(</span>nodeDataArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n");
      out.write("    <span class=\"token punctuation\">}</span>\n");
      out.write("\n");
      out.write("    <span class=\"token keyword\">function</span> <span class=\"token function\">makeTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">level<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">,</span> nodeDataArray<span class=\"token punctuation\">,</span> parentdata</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n");
      out.write("      <span class=\"token keyword\">var</span> numchildren <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n");
      out.write("      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numchildren<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n");
      out.write("        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&gt;=</span> max<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n");
      out.write("        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n");
      out.write("        <span class=\"token keyword\">var</span> childdata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> count<span class=\"token punctuation\">,</span> parent<span class=\"token operator\">:</span> parentdata<span class=\"token punctuation\">.</span>key <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n");
      out.write("        nodeDataArray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>childdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n");
      out.write("        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>level <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n");
      out.write("          count <span class=\"token operator\">=</span> <span class=\"token function\">makeTree</span><span class=\"token punctuation\">(</span>level <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">,</span> nodeDataArray<span class=\"token punctuation\">,</span> childdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n");
      out.write("        <span class=\"token punctuation\">}</span>\n");
      out.write("      <span class=\"token punctuation\">}</span>\n");
      out.write("      <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n");
      out.write("    <span class=\"token punctuation\">}</span>\n");
      out.write("\n");
      out.write("    <span class=\"token comment\">// takes a property change on either isTreeLeaf or isTreeExpanded and selects the correct image to use</span>\n");
      out.write("    <span class=\"token keyword\">function</span> <span class=\"token function\">imageConverter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prop<span class=\"token punctuation\">,</span> picture</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n");
      out.write("      <span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> picture<span class=\"token punctuation\">.</span>part<span class=\"token punctuation\">;</span>\n");
      out.write("      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>isTreeLeaf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n");
      out.write("        <span class=\"token keyword\">return</span> <span class=\"token string\">\"images/document.svg\"</span><span class=\"token punctuation\">;</span>\n");
      out.write("      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n");
      out.write("        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>isTreeExpanded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n");
      out.write("          <span class=\"token keyword\">return</span> <span class=\"token string\">\"images/openFolder.svg\"</span><span class=\"token punctuation\">;</span>\n");
      out.write("        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n");
      out.write("          <span class=\"token keyword\">return</span> <span class=\"token string\">\"images/closedFolder.svg\"</span><span class=\"token punctuation\">;</span>\n");
      out.write("        <span class=\"token punctuation\">}</span>\n");
      out.write("      <span class=\"token punctuation\">}</span>\n");
      out.write("    <span class=\"token punctuation\">}</span>\n");
      out.write("    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n");
      out.write("  </pre></div>\n");
      out.write("  </body>\n");
      out.write("  </html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
