/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.81
 * Generated at: 2022-07-05 02:06:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ch08;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class validation04_005f2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Validation</title>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	function checkLogin(){\r\n");
      out.write("		//admin\r\n");
      out.write("		let form = document.loginForm;\r\n");
      out.write("		\r\n");
      out.write("		//form.id.value : admin (lwngth : 5)\r\n");
      out.write("		for(i=0;i<form.id.value.length;i++){\r\n");
      out.write("			let ch =form.id.value.charAt(i);	//i: 0(a)~4(n)\r\n");
      out.write("			\r\n");
      out.write("			//아이디는 영문 소문자만 가능\r\n");
      out.write("			if((ch<'a' || ch>'z')&&(ch>'A' || ch<'Z')&&(ch>'0' || ch<'9')){\r\n");
      out.write("				alert(\"아이디는 영문 소문자만 입력 가능합니다.\");\r\n");
      out.write("				form.id.select();\r\n");
      out.write("				return;	//여기서 멈춤 break는 for문을 멈추는 반면에 return은 함수를 멈춤;\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		//alert(\"개똥이\");	//return시에는 실행이 안됨. break;일 때는 실행됨\r\n");
      out.write("		\r\n");
      out.write("		//비밀번호는 숫자만 입력 가능\r\n");
      out.write("		if(isNaN(form.passwd.value)){\r\n");
      out.write("			alert(\"비밀번호는 숫자만 입력 가능합니다.\");\r\n");
      out.write("			form.passwd.select();\r\n");
      out.write("			return; //정지 \r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		//아이디 및 비밀번호 유효성 검사 통과시\r\n");
      out.write("		form.submit();	//폼페이지에 입력된 데이터 값을 서버로 전송(request객체를 통해)\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<!-- validation03_process.jsp?id=a001&passwd=java -->\r\n");
      out.write("	<form name=\"loginForm\" action=\"validation03_process.jsp\" method=\"post\">\r\n");
      out.write("		<p>아이디 : <input type=\"text\" name=\"id\" /></p>\r\n");
      out.write("		<p>비밀번호 : <input type=\"password\" name=\"passwd\" /></p>\r\n");
      out.write("		<p><input type=\"button\" value=\"전송\" onclick=\"checkLogin()\" /></p>\r\n");
      out.write("	</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
