  <!DOCTYPE html>
  <html lang="en">
  <body>
  <script src="https://unpkg.com/gojs@2.2.13/release/go.js"></script>
  <p>
    This is a minimalist HTML and JavaScript skeleton of the GoJS Sample
    <a href="https://gojs.net/latest/samples/treeView.html">treeView.html</a>. It was automatically generated from a button on the sample page,
    and does not contain the full HTML. It is intended as a starting point to adapt for your own usage.
    For many samples, you may need to inspect the
    <a href="https://github.com/NorthwoodsSoftware/GoJS/blob/master/samples/treeView.html">full source on Github</a>
    and copy other files or scripts.
  </p>
  <div id="allSampleContent" class="p-4 w-full">
    <script id="code">
    // use a V figure instead of MinusLine in the TreeExpanderButton
    go.Shape.defineFigureGenerator("ExpandedLine", (shape, w, h) => {
      return new go.Geometry()
            .add(new go.PathFigure(0, 0.25*h, false)
                  .add(new go.PathSegment(go.PathSegment.Line, .5 * w, 0.75*h))
                  .add(new go.PathSegment(go.PathSegment.Line, w, 0.25*h)));
    });

    // use a sideways V figure instead of PlusLine in the TreeExpanderButton
    go.Shape.defineFigureGenerator("CollapsedLine", (shape, w, h) => {
      return new go.Geometry()
            .add(new go.PathFigure(0.25*w, 0, false)
                  .add(new go.PathSegment(go.PathSegment.Line, 0.75*w, .5 * h))
                  .add(new go.PathSegment(go.PathSegment.Line, 0.25*w, h)));
    });

    function init() {

      // Since 2.2 you can also author concise templates with method chaining instead of GraphObject.make
      // For details, see https://gojs.net/latest/intro/buildingObjects.html
      const $ = go.GraphObject.make;  // for conciseness in defining templates

      myDiagram =
        $(go.Diagram, "myDiagramDiv",
          {
            allowMove: false,
            allowCopy: false,
            allowDelete: false,
            allowHorizontalScroll: false,
            layout:
              $(go.TreeLayout,
                {
                  alignment: go.TreeLayout.AlignmentStart,
                  angle: 0,
                  compaction: go.TreeLayout.CompactionNone,
                  layerSpacing: 16,
                  layerSpacingParentOverlap: 1,
                  nodeIndentPastParent: 1.0,
                  nodeSpacing: 0,
                  setsPortSpot: false,
                  setsChildPortSpot: false
                })
          });

      myDiagram.nodeTemplate =
        $(go.Node,
          { // no Adornment: instead change panel background color by binding to Node.isSelected
            selectionAdorned: false,
            // a custom function to allow expanding/collapsing on double-click
            // this uses similar logic to a TreeExpanderButton
            doubleClick: (e, node) => {
              var cmd = myDiagram.commandHandler;
              if (node.isTreeExpanded) {
                if (!cmd.canCollapseTree(node)) return;
              } else {
                if (!cmd.canExpandTree(node)) return;
              }
              e.handled = true;
              if (node.isTreeExpanded) {
                cmd.collapseTree(node);
              } else {
                cmd.expandTree(node);
              }
            }
          },
          $("TreeExpanderButton",
            { // customize the button's appearance
              "_treeExpandedFigure": "ExpandedLine",
              "_treeCollapsedFigure": "CollapsedLine",
              "ButtonBorder.fill": "whitesmoke",
              "ButtonBorder.stroke": null,
              "_buttonFillOver": "rgba(0,128,255,0.25)",
              "_buttonStrokeOver": null
            }),
          $(go.Panel, "Horizontal",
            { position: new go.Point(18, 0) },
            new go.Binding("background", "isSelected", s => s ? "lightblue" : "white").ofObject(),
            $(go.Picture,
              {
                width: 18, height: 18,
                margin: new go.Margin(0, 4, 0, 0),
                imageStretch: go.GraphObject.Uniform
              },
              // bind the picture source on two properties of the Node
              // to display open folder, closed folder, or document
              new go.Binding("source", "isTreeExpanded", imageConverter).ofObject(),
              new go.Binding("source", "isTreeLeaf", imageConverter).ofObject()),
            $(go.TextBlock,
              { font: '9pt Verdana, sans-serif' },
              new go.Binding("text", "key", s => "item " + s))
          )  // end Horizontal Panel
        );  // end Node

      // without lines
      myDiagram.linkTemplate = $(go.Link);

      // // with lines
      myDiagram.linkTemplate =
        $(go.Link,
          { selectable: false,
            routing: go.Link.Orthogonal,
            fromEndSegmentLength: 4,
            toEndSegmentLength: 4,
            fromSpot: new go.Spot(0.001, 1, 7, 0),
            toSpot: go.Spot.Left },
          $(go.Shape,
            { stroke: 'gray', strokeDashArray: [1,2] }));

      // create a random tree
      var nodeDataArray = [{ key: 0 }];
      var max = 49;
      var count = 0;
      while (count < max) {
        count = makeTree(3, count, max, nodeDataArray, nodeDataArray[0]);
      }
      
      console.log(nodeDataArray);
      tmp = [];
      tmp.push({"key" : 0, "__gohashid" : 0});
//       myDiagram.model = new go.TreeModel(nodeDataArray);
      myDiagram.model = new go.TreeModel(tmp);
    } // init() end

    function makeTree(level, count, max, nodeDataArray, parentdata) {
      var numchildren = Math.floor(Math.random() * 10);
      for (var i = 0; i < numchildren; i++) {
        if (count >= max) return count;
        count++;
        var childdata = { key: count, parent: parentdata.key };
        nodeDataArray.push(childdata);
        if (level > 0 && Math.random() > 0.5) {
          count = makeTree(level - 1, count, max, nodeDataArray, childdata);
        }
      }
      return count;
    }

    // takes a property change on either isTreeLeaf or isTreeExpanded and selects the correct image to use
    function imageConverter(prop, picture) {
      var node = picture.part;
      if (node.isTreeLeaf) {
        return "images/document.svg";
      } else {
        if (node.isTreeExpanded) {
          return "images/openFolder.svg";
        } else {
          return "images/closedFolder.svg";
        }
      }
    }
    window.addEventListener('DOMContentLoaded', init);
  </script>

<div id="sample">
  <div id="myDiagramDiv" style="border: 1px solid black; width: 300px; height: 500px; position: relative; -webkit-tap-highlight-color: rgba(255, 255, 255, 0); cursor: auto;"><canvas tabindex="0" width="281" height="498" style="position: absolute; top: 0px; left: 0px; z-index: 2; user-select: none; touch-action: none; width: 281px; height: 498px; cursor: auto;">This text is displayed if your browser does not support the Canvas HTML element.</canvas><div style="position: absolute; overflow: auto; width: 298px; height: 498px; z-index: 1;"><div style="position: absolute; width: 1px; height: 9010px;"></div></div></div>
  <p>
    This shows how to create a traditional "TreeView" in a <b>GoJS</b> diagram.
    There are 500 nodes in the tree.
  </p>
  <p>
    Look at this page's source code to see how the properties on the <a href="../api/symbols/TreeLayout.html" target="api">TreeLayout</a> are set.
  </p>
  <p>
    The node template makes use of a "TreeExpanderButton" panel to implement the expand/collapse button.
    It also implements a custom doubleClick function to allow nodes to be expanded/collapsed on double-click.
    Lastly, the source of the picture on each node is bound to two different properties, <a href="../api/symbols/Node.html#isTreeLeaf" target="api">Node.isTreeLeaf</a> and
    <a href="../api/symbols/Node.html#isTreeExpanded" target="api">Node.isTreeExpanded</a>; the <b>imageConverter</b> function is used to select the correct image
    based on these properties.
  </p>
  <p>There are two link templates in the source code, one which uses no lines, and one which connects the items with dotted lines.</p>
  <p>
    See the <a href="../intro/buttons.html" target="_blank">Intro page on Buttons</a> for more GoJS button information.
    The <a href="triStateCheckBoxTree.html" target="_blank">Tri-state CheckBox Tree</a> sample demonstrates a "tree view" where each item
    has a three-state checkbox.
    The <a href="treeMapper.html" target="_blank">Tree Mapper</a> sample demonstrates how to map (draw associations) between items in two trees.
    The <a href="updateDemo.html" target="_blank">Update Demo</a> sample also uses a "tree view" for its own purposes.
  </p>
  <p>The icons in this sample are from <a href="https://icons8.com/" target="blank">icons8.com</a></p>
<p class="text-xs">GoJS version 2.2.13. Copyright 1998-2022 by Northwoods Software.</p></div>
    <p><a href="https://github.com/NorthwoodsSoftware/GoJS/blob/master/samples/treeView.html" target="_blank">View this sample page's source on GitHub</a></p><pre class=" language-js">
    <span class="token comment">// use a V figure instead of MinusLine in the TreeExpanderButton</span>
    go<span class="token punctuation">.</span>Shape<span class="token punctuation">.</span><span class="token function">defineFigureGenerator</span><span class="token punctuation">(</span><span class="token string">"ExpandedLine"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">shape<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">go<span class="token punctuation">.</span>Geometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">go<span class="token punctuation">.</span>PathFigure</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token operator">*</span>h<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
                  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">go<span class="token punctuation">.</span>PathSegment</span><span class="token punctuation">(</span>go<span class="token punctuation">.</span>PathSegment<span class="token punctuation">.</span>Line<span class="token punctuation">,</span> <span class="token number">.5</span> <span class="token operator">*</span> w<span class="token punctuation">,</span> <span class="token number">0.75</span><span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span>
                  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">go<span class="token punctuation">.</span>PathSegment</span><span class="token punctuation">(</span>go<span class="token punctuation">.</span>PathSegment<span class="token punctuation">.</span>Line<span class="token punctuation">,</span> w<span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// use a sideways V figure instead of PlusLine in the TreeExpanderButton</span>
    go<span class="token punctuation">.</span>Shape<span class="token punctuation">.</span><span class="token function">defineFigureGenerator</span><span class="token punctuation">(</span><span class="token string">"CollapsedLine"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">shape<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">go<span class="token punctuation">.</span>Geometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">go<span class="token punctuation">.</span>PathFigure</span><span class="token punctuation">(</span><span class="token number">0.25</span><span class="token operator">*</span>w<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
                  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">go<span class="token punctuation">.</span>PathSegment</span><span class="token punctuation">(</span>go<span class="token punctuation">.</span>PathSegment<span class="token punctuation">.</span>Line<span class="token punctuation">,</span> <span class="token number">0.75</span><span class="token operator">*</span>w<span class="token punctuation">,</span> <span class="token number">.5</span> <span class="token operator">*</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span>
                  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">go<span class="token punctuation">.</span>PathSegment</span><span class="token punctuation">(</span>go<span class="token punctuation">.</span>PathSegment<span class="token punctuation">.</span>Line<span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token operator">*</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

      <span class="token comment">// Since 2.2 you can also author concise templates with method chaining instead of GraphObject.make</span>
      <span class="token comment">// For details, see https://gojs.net/latest/intro/buildingObjects.html</span>
      <span class="token keyword">const</span> $ <span class="token operator">=</span> go<span class="token punctuation">.</span>GraphObject<span class="token punctuation">.</span>make<span class="token punctuation">;</span>  <span class="token comment">// for conciseness in defining templates</span>

      myDiagram <span class="token operator">=</span>
        <span class="token function">$</span><span class="token punctuation">(</span>go<span class="token punctuation">.</span>Diagram<span class="token punctuation">,</span> <span class="token string">"myDiagramDiv"</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            allowMove<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            allowCopy<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            allowDelete<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            allowHorizontalScroll<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            layout<span class="token operator">:</span>
              <span class="token function">$</span><span class="token punctuation">(</span>go<span class="token punctuation">.</span>TreeLayout<span class="token punctuation">,</span>
                <span class="token punctuation">{</span>
                  alignment<span class="token operator">:</span> go<span class="token punctuation">.</span>TreeLayout<span class="token punctuation">.</span>AlignmentStart<span class="token punctuation">,</span>
                  angle<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                  compaction<span class="token operator">:</span> go<span class="token punctuation">.</span>TreeLayout<span class="token punctuation">.</span>CompactionNone<span class="token punctuation">,</span>
                  layerSpacing<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>
                  layerSpacingParentOverlap<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                  nodeIndentPastParent<span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>
                  nodeSpacing<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                  setsPortSpot<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                  setsChildPortSpot<span class="token operator">:</span> <span class="token boolean">false</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      myDiagram<span class="token punctuation">.</span>nodeTemplate <span class="token operator">=</span>
        <span class="token function">$</span><span class="token punctuation">(</span>go<span class="token punctuation">.</span>Node<span class="token punctuation">,</span>
          <span class="token punctuation">{</span> <span class="token comment">// no Adornment: instead change panel background color by binding to Node.isSelected</span>
            selectionAdorned<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token comment">// a custom function to allow expanding/collapsing on double-click</span>
            <span class="token comment">// this uses similar logic to a TreeExpanderButton</span>
            <span class="token function-variable function">doubleClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token keyword">var</span> cmd <span class="token operator">=</span> myDiagram<span class="token punctuation">.</span>commandHandler<span class="token punctuation">;</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>isTreeExpanded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cmd<span class="token punctuation">.</span><span class="token function">canCollapseTree</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cmd<span class="token punctuation">.</span><span class="token function">canExpandTree</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
              e<span class="token punctuation">.</span>handled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>isTreeExpanded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cmd<span class="token punctuation">.</span><span class="token function">collapseTree</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                cmd<span class="token punctuation">.</span><span class="token function">expandTree</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"TreeExpanderButton"</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token comment">// customize the button's appearance</span>
              <span class="token string">"_treeExpandedFigure"</span><span class="token operator">:</span> <span class="token string">"ExpandedLine"</span><span class="token punctuation">,</span>
              <span class="token string">"_treeCollapsedFigure"</span><span class="token operator">:</span> <span class="token string">"CollapsedLine"</span><span class="token punctuation">,</span>
              <span class="token string">"ButtonBorder.fill"</span><span class="token operator">:</span> <span class="token string">"whitesmoke"</span><span class="token punctuation">,</span>
              <span class="token string">"ButtonBorder.stroke"</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
              <span class="token string">"_buttonFillOver"</span><span class="token operator">:</span> <span class="token string">"rgba(0,128,255,0.25)"</span><span class="token punctuation">,</span>
              <span class="token string">"_buttonStrokeOver"</span><span class="token operator">:</span> <span class="token keyword">null</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token function">$</span><span class="token punctuation">(</span>go<span class="token punctuation">.</span>Panel<span class="token punctuation">,</span> <span class="token string">"Horizontal"</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> position<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">go<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">go<span class="token punctuation">.</span>Binding</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">,</span> <span class="token string">"isSelected"</span><span class="token punctuation">,</span> <span class="token parameter">s</span> <span class="token operator">=&gt;</span> s <span class="token operator">?</span> <span class="token string">"lightblue"</span> <span class="token operator">:</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ofObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">$</span><span class="token punctuation">(</span>go<span class="token punctuation">.</span>Picture<span class="token punctuation">,</span>
              <span class="token punctuation">{</span>
                width<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> height<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
                margin<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">go<span class="token punctuation">.</span>Margin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                imageStretch<span class="token operator">:</span> go<span class="token punctuation">.</span>GraphObject<span class="token punctuation">.</span>Uniform
              <span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token comment">// bind the picture source on two properties of the Node</span>
              <span class="token comment">// to display open folder, closed folder, or document</span>
              <span class="token keyword">new</span> <span class="token class-name">go<span class="token punctuation">.</span>Binding</span><span class="token punctuation">(</span><span class="token string">"source"</span><span class="token punctuation">,</span> <span class="token string">"isTreeExpanded"</span><span class="token punctuation">,</span> imageConverter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ofObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token keyword">new</span> <span class="token class-name">go<span class="token punctuation">.</span>Binding</span><span class="token punctuation">(</span><span class="token string">"source"</span><span class="token punctuation">,</span> <span class="token string">"isTreeLeaf"</span><span class="token punctuation">,</span> imageConverter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ofObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">$</span><span class="token punctuation">(</span>go<span class="token punctuation">.</span>TextBlock<span class="token punctuation">,</span>
              <span class="token punctuation">{</span> font<span class="token operator">:</span> <span class="token string">'9pt Verdana, sans-serif'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
              <span class="token keyword">new</span> <span class="token class-name">go<span class="token punctuation">.</span>Binding</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token parameter">s</span> <span class="token operator">=&gt;</span> <span class="token string">"item "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">)</span>  <span class="token comment">// end Horizontal Panel</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// end Node</span>

      <span class="token comment">// without lines</span>
      myDiagram<span class="token punctuation">.</span>linkTemplate <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>go<span class="token punctuation">.</span>Link<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// // with lines</span>
      <span class="token comment">// myDiagram.linkTemplate =</span>
      <span class="token comment">//   $(go.Link,</span>
      <span class="token comment">//     { selectable: false,</span>
      <span class="token comment">//       routing: go.Link.Orthogonal,</span>
      <span class="token comment">//       fromEndSegmentLength: 4,</span>
      <span class="token comment">//       toEndSegmentLength: 4,</span>
      <span class="token comment">//       fromSpot: new go.Spot(0.001, 1, 7, 0),</span>
      <span class="token comment">//       toSpot: go.Spot.Left },</span>
      <span class="token comment">//     $(go.Shape,</span>
      <span class="token comment">//       { stroke: 'gray', strokeDashArray: [1,2] }));</span>

      <span class="token comment">// create a random tree</span>
      <span class="token keyword">var</span> nodeDataArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> key<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> max <span class="token operator">=</span> <span class="token number">499</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count <span class="token operator">=</span> <span class="token function">makeTree</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> max<span class="token punctuation">,</span> nodeDataArray<span class="token punctuation">,</span> nodeDataArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      myDiagram<span class="token punctuation">.</span>model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">go<span class="token punctuation">.</span>TreeModel</span><span class="token punctuation">(</span>nodeDataArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">makeTree</span><span class="token punctuation">(</span><span class="token parameter">level<span class="token punctuation">,</span> count<span class="token punctuation">,</span> max<span class="token punctuation">,</span> nodeDataArray<span class="token punctuation">,</span> parentdata</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> numchildren <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numchildren<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;=</span> max<span class="token punctuation">)</span> <span class="token keyword">return</span> count<span class="token punctuation">;</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> childdata <span class="token operator">=</span> <span class="token punctuation">{</span> key<span class="token operator">:</span> count<span class="token punctuation">,</span> parent<span class="token operator">:</span> parentdata<span class="token punctuation">.</span>key <span class="token punctuation">}</span><span class="token punctuation">;</span>
        nodeDataArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>childdata<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          count <span class="token operator">=</span> <span class="token function">makeTree</span><span class="token punctuation">(</span>level <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> max<span class="token punctuation">,</span> nodeDataArray<span class="token punctuation">,</span> childdata<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// takes a property change on either isTreeLeaf or isTreeExpanded and selects the correct image to use</span>
    <span class="token keyword">function</span> <span class="token function">imageConverter</span><span class="token punctuation">(</span><span class="token parameter">prop<span class="token punctuation">,</span> picture</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> node <span class="token operator">=</span> picture<span class="token punctuation">.</span>part<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>isTreeLeaf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"images/document.svg"</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>isTreeExpanded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token string">"images/openFolder.svg"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token string">"images/closedFolder.svg"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span>
  </pre></div>
  </body>
  </html>